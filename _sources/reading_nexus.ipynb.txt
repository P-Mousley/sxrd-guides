{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b5e5a61d-071d-452d-abe8-76115e8f92e8",
   "metadata": {},
   "source": [
    "# reading and viewer nexus file data\n",
    "\n",
    "Below are some useful snippets of code for loading in data from a nexus file, checking for keywords within the nexus file structure, and then extracting data from a path within the nexus file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "5ba34bff-e512-469c-bc8e-0ae4877fb8d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nexusformat.nexus as nx\n",
    "import numpy as np\n",
    "from nexusformat.nexus.tree import NXlink,NXdata,NXentry\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Load in example dataset\n",
    "nxspath='/dls/science/groups/das/ExampleData/i07/fast_rsm_example_data/si40043/i07-593344.nxs'\n",
    "nxs_data=nx.nxload(nxspath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "a4496e7a-627d-44ff-b87a-aef39e60b3ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Define a checking function to printout the data paths that contain a certain string\n",
    "def checkforkey(keystring,data,level=0,keypath='',level_limit=3):\n",
    "    '''\n",
    "    function for iteratively checking through nexus file for certain key names up to a certain depth level\n",
    "    '''\n",
    "    if level==level_limit:\n",
    "        return\n",
    "    for key in data.keys():\n",
    "        keypathin=\"/\".join([keypath,key])\n",
    "\n",
    "        if key.find(keystring)==0:\n",
    "            x=4\n",
    "            print(keypathin)\n",
    "        goodlist=[NXdata,NXentry]\n",
    "        if type(data[key])not in goodlist:\n",
    "            pass\n",
    "        elif (len(data[key].keys())>=1):\n",
    "            inlevel=level+1\n",
    "            checkforkey(keystring,data[key],level=inlevel,keypath=keypathin)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "15d4cbcd-6286-4f20-aa6e-58fa4ac72f0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/entry/EXCALIBUR/diff1delta_value\n",
      "/entry/EXCALIBUR/diff1delta_value_set\n",
      "/entry/EXCALIBUR_Region_1_sum/diff1delta_value\n",
      "/entry/EXCALIBUR_Region_1_sum/diff1delta_value_set\n",
      "/entry/EXCALIBUR_Region_2_sum/diff1delta_value\n",
      "/entry/EXCALIBUR_Region_2_sum/diff1delta_value_set\n",
      "/entry/EXCALIBUR_sum/diff1delta_value\n",
      "/entry/EXCALIBUR_sum/diff1delta_value_set\n",
      "/entry/adc1/diff1delta_value\n",
      "/entry/adc1/diff1delta_value_set\n",
      "/entry/adc2/diff1delta_value\n",
      "/entry/adc2/diff1delta_value_set\n",
      "/entry/adc3/diff1delta_value\n",
      "/entry/adc3/diff1delta_value_set\n",
      "/entry/adc4/diff1delta_value\n",
      "/entry/adc4/diff1delta_value_set\n",
      "/entry/d5i/diff1delta_value\n",
      "/entry/d5i/diff1delta_value_set\n",
      "/entry/d5xminus/diff1delta_value\n",
      "/entry/d5xminus/diff1delta_value_set\n",
      "/entry/d5xplus/diff1delta_value\n",
      "/entry/d5xplus/diff1delta_value_set\n",
      "/entry/d5yminus/diff1delta_value\n",
      "/entry/d5yminus/diff1delta_value_set\n",
      "/entry/d5yplus/diff1delta_value\n",
      "/entry/d5yplus/diff1delta_value_set\n",
      "/entry/hkl/diff1delta_value\n",
      "/entry/hkl/diff1delta_value_set\n"
     ]
    }
   ],
   "source": [
    "#example of checking for string in datapaths up to level 4\n",
    "checkforkey('diff1delta',nxs_data,level_limit=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "00168438-9d73-4032-85d1-f9e0f0775152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fcd42382200>]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#extract the data into an array and then plot the data\n",
    "outdata=np.array(nxs_data['/entry/EXCALIBUR_sum/diff1delta_value_set'].data)\n",
    "plt.plot(outdata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67721786-dcde-4826-a970-ccef3850d0d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
